9.6 Múltiples Joins

Nosotros podemos unir N cantidad de tablas dependiende de las necesidades, esas uniones pueden incluir Left Join, right join o Inner Join.

Vemos esto con un ejemplo complejo.

Obtengamos el nombre completo de los usuarios que hayan prestado un libro, el libro debio haber sido escrito por un autor un seudonimo, ademas, de que el prestamo debio de haberse realizado el dia de hoy.

Esta es una problematica planteada, la cual implica trabajar con muchas tablas.

Vamos a trabajar con cuatro.

- usuarios
- libros_usuarios
- libros
- autores

Se trabajaran en ese orden.


Para poder resolver la problematica, lo que se ha hecho es insertar un par de registros mas a la tabla usuarios y a la tabla libros_usuarios.

tABLA usuaios:

INSERT INTO `usuarios` (`usuario_id`, `nombre`, `apellidos`, `username`, `email`, `fecha_creación`) VALUES
(1, 'Ozkar', 'Kozlov', 'kozlov', 'klzlov@email.com', '2023-03-15 16:36:28'),
(2, 'klvst3r', 'io', 'klvst3r', 'klvst3r@email.com', '2023-03-15 16:36:28'),
(3, 'Daenerys ', 'Targaryen', 'daenerys', 'daeny@email.com', '2023-03-22 12:04:31'),
(4, 'Ned', 'Stark', 'ned', 'ned@email.com', '2023-03-22 12:04:31'),
(5, 'Margaery', 'Tyrell', 'margaery', 'margaery@email.com', '2023-03-22 12:05:46'),
(6, 'Tyrion', 'Lannister', 'tyrion', 'tyrion@email.com', '2023-03-22 12:05:46');


Tabla libros_usuarios:

INSERT INTO libros_usuarios(libro_id, usuario_id) VALUES (1,1), (2,1),(3,1),(4,4),(5,3),(5,4),(1,5),(3,5),(2,6),(5,6);

como la sentencia sera compleja se construira poco apoco:

1. Obtengamos el nombre completo de los usuarios:

	SELECT 
		CONCAT(nombre," ", apellidos )
	FROM usuarios;

2. se coloca un alias

	SELECT 
		CONCAT(nombre," ", apellidos) AS nombre_usuario 
	FROM usuarios;

3. ahora debemos obtener todos los usuarios que hayan realizado un prestamo, para ello usamos INNER JOIN, union libros_usuarios

	SELECT 
		CONCAT(nombre," ", apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id;

	utilizando la llave primaria y la llave foranea

	Resultado


	nombre_usuario	
	--------------
	Ozkar Kozlov
	Ozkar Kozlov
	Ozkar Kozlov
	Ozkar Kozlov
	Ozkar Kozlov
	Ozkar Kozlov
	Daenerys  Targaryen
	Ned Stark
	Ned Stark
	Margaery Tyrell
	Margaery Tyrell
	Tyrion Lannister
	Tyrion Lannister



	En esta ocación vemos que tenemos registros repetidos, debido a que se han realizado multiples prestamos por los usuarios que se duplican.

	Lo que se va a hacer es colocar un DISTINCT

	SELECT DISTINCT 
		CONCAT(usuarios.nombre," ", usuarios.apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id;


	Observamos ahora que ya no se repiten los nombres, hasta aca todo bien.


4. Ahora necesitamos filtrar los libros prestados por los autoresc on seudonimo.

	Para ello debemos de ejecutar otro JOIN con libros.



	SELECT DISTINCT 
		CONCAT(usuarios.nombre," ", usuarios.apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id
	INNER JOIN libros ON libros_usuarios.libro_id = libros.libro_id;

	Se obtiene la misma salida.

	como ya bajamos hasta este nivel ya podemos hacer un INNER JOIN con autores.


	SELECT DISTINCT 
		CONCAT(usuarios.nombre," ", usuarios.apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id
	INNER JOIN libros ON libros_usuarios.libro_id = libros.libro_id
	INNER JOIN  autores ON libros.autor_id = autores.autor_id 
				AND autores.seudonimo IS NOT NULL;


	Resultado:

		nombre_usuario	
		--------------
		Ozkar Kozlov
		Daenerys  Targaryen
		Ned Stark
		Margaery Tyrell
		Tyrion Lannister


	Seguimos obteniendo los mismos resultados, debidoa  que los prestamos han sido hacia autores que han tenido un seudonimo.

5. 	Para finalizar se colocara la fecha actual.


	SELECT DISTINCT 
		CONCAT(usuarios.nombre," ", usuarios.apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id
			AND DATE(libros_usuarios.fecha_creacion) = CURDATE() 
	INNER JOIN libros ON libros_usuarios.libro_id = libros.libro_id
	INNER JOIN  autores ON libros.autor_id = autores.autor_id 
				AND autores.seudonimo IS NOT NULL;


		Resultado

			nombre_usuario	
			--------------
			Ozkar Kozlov
			Daenerys  Targaryen
			Ned Stark
			Margaery Tyrell
			Tyrion Lannister


De esta forma es como estamos obteniendo el resultado deseado, como se puede observar, se tuvo que trabajar con cuatro tablas, se tuvieron que unir y se tuvieron que condicionar.

Se pueden hacer un par de modificaciones por ejemplo, colocar libros, los cuales hayan sido escritos por un autor sin seudonimo:

	
	
	SELECT DISTINCT 
		CONCAT(usuarios.nombre," ", usuarios.apellidos) AS nombre_usuario 
	FROM usuarios 
	INNER JOIN libros_usuarios ON usuarios.usuario_id = libros_usuarios.usuario_id
			AND DATE(libros_usuarios.fecha_creacion) = CURDATE() 
	INNER JOIN libros ON libros_usuarios.libro_id = libros.libro_id
	INNER JOIN  autores ON libros.autor_id = autores.autor_id 
				AND autores.seudonimo IS NOT NULL;


De esta forma es como podemos unir diferentes tablas, utilizando ledft join, right join, inner join, todo depende de lo que 	se necesite.

